{
  "bench_run": {
    "id": "17253442266",
    "html_url": "https://github.com/enso-org/enso/actions/runs/17253442266",
    "run_attempt": 1,
    "event": "schedule",
    "display_title": "Benchmark Engine",
    "head_commit": {
      "id": "fd9460df4f98a01b08f720d2646ad14b5bdbae37",
      "message": "Refactor Function IR to Java (#13037)\n\n* Remove iterative compilation failure\n\n* Use qualified name for java.util.function.Function.\n\nThis prevents ambiguous import symbol error for Function IR and java.util.function.Function.\n\n* Getter for Persistance.Reference returns the same type\n\n* Refactor Function Scala IR to Java\n\n* Use named copy methods\n\n* Replace unapply methods by standard type match\n\n* Use builders instead of constructor\n\n* Remove parameter names when calling Java IR methods.\n\nThis was causing incremental compilation issues\n\n* Remove dependency Method -> Function.\n\nThis was dependency from Scala to Java, which causes compilation errors.\n\n* Copy builder copies fields from the object\n\n* Ensure copy function actually copy fields\n\n* copy methods delegate to copy builders\n\n* Fix pattern match\n\n* Test MiniPass traverse over Binary.Operator and Function.Lambda\n\n* Persistance.Reference implements equals and hashCode\n\n* Implement MockIR\n\n* Implement MockModule\n\n* Test MockModule traversal\n\n* Fix links in docs\n\n* Test single expression traversal in MockModule\n\n* prepare on MockIR is done for parents\n\n* fix contract of mapExpressions in MockIR\n\n* Update docs for mapExpressions\n\n* Test mapExpressions contract\n\n* Fix mapExpressions contract in generated code\n\n* Add more MapExpressionsTest\n\n* Test that mapExpressions does no necessary copies\n\n* Implement Application.Builder\n\n* Fix copy condition in mapExpressions\n\n* No unnecessary nested child in test\n\n* Special handling of DefArg and CallArg in mapExpressions\n\n* Test the defaultValue and ascribedType are collected by mapExpressions\n\n* Fix test: name is not collected\n\n* Fix duplicating metafields in mapExpressions\n\n* No special handling for DefinitionArg and CallArg in mapExpressions\n\n* Update test - name of DefArg and CallArg are collected by mapExpressions\n\n* Update test - name of DefArg is traversed by MiniPassTraverser\n\n* Update test - check visited IR nodes more specifically\n\n* Accessor to Function.Lambda.arguments is a method\n\n* Prefer builders over method calls with named arguments.\n\n* fmt\n\n* UnreachableMatchBranches can encounter Case.Branch in transformExpression\n\n* CopyBuilder does not do deep copy of passData.\n\nNote that AliasMetadata.duplicate returns None\n\n* Dump Name of DefinitionArgument to IGV\n\n* FullyQualifiedNames: Alias meta does not have to be on every literal\n\n* GlobalNames: Alias meta does not have to be on every literal\n\n* TailCall pass can encounter Case.Branch\n\n* Perist.Reference implements toString.\n\nSo that CompilerTests.assertIR works\n\n* refact: simplify condition\n\n* Update MiniPassTraverserTest - expected IR.prepare contract violation\n\n* fmt\n\n* Prepare does not have to be called on parent.\n\nThis is a known violation of MiniPass.prepare contract. It is because MiniPassTraverser relies on `mapExpressions`.\n\n* Special handling for DefinitionArg and CallArg in mapExpressions\n\nThis reverts commit a88e1e86793aed304d9098a6a97463238b43f384.\n\n* Name of argument is not collected in Function.Lambda\n\n* MiniPassTest: First execute the test spec, then compare IRs\n\n* TailCall: Case.Branch is a tail candidate\n\n* Copy builder copies also UUIDs.\n\nThis fixes DataflowAnalysisTest\n\n* Fix Lambda construction in LambdaShorthandToLambdaMegaPass\n\n* fmt\n\n* Fix Lambda construction in SectionsToBinOpMegaPass\n\n* Write docs on copy for IR.\n\nRemove outdated docs.\n\n* Tests for shallow copy\n\n* Fix Lambda construction inLambdaConsolidateTest\n\n* Add IRDuplicateTest\n\n* Rename to IRShallowCopyTest\n\n* Copy builder does shallow copy\n\n* Add mockit test dependency to runtime-compiler/test\n\n* Add TailCallTest\n\n* Add a failing TailCallTest.\n\nThis reproduces the compilation error in List.enso\n\n* Test that all Function.Lambda should be marked as canBeTCO\n\n* All Functions canBeTCO by default\n\n* fmt\n\n* Remove non existing import\n\n* Dump module IRs also during initial passes\n\n* Run mini passes as mega when IRDumper is set\n\n* Dump body of SugaredType\n\n* Dump Function.Binding.\n\nAlso dump properties of Function\n\n* Add failing test that SugaredType's body has location\n\n* Attach location to Function.Binding in parser\n\n* Test that ascribedType should be attached to DefinitionArgument\n\n* Ensure ascribedType is generated in MethodDefinitions\n\n* Remove unused imports\n\n* fmt\n\n---------\n\nCo-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>",
      "timestamp": "2025-08-26T14:28:04Z",
      "author": {
        "name": "Pavel Marek"
      }
    }
  },
  "label_score_dict": {
    "org.enso.compiler.benchmarks.exportimport.ExportImportResolutionBenchmark.importsAndExportsResolution": 2.1634567714906616,
    "org.enso.compiler.benchmarks.exportimport.ExportImportResolutionBenchmark.importsResolution": 0.2347348048739464,
    "org.enso.compiler.benchmarks.inline.InlineCompilerBenchmark.longExpression": 68.45727043893864,
    "org.enso.compiler.benchmarks.inline.InlineCompilerErrorBenchmark.expressionWithErrors": 68.28153933776969,
    "org.enso.compiler.benchmarks.module.ImportStandardLibrariesBenchmark.importStandardLibraries": 68.46589119239971,
    "org.enso.compiler.benchmarks.module.ManyErrorsBenchmark.manyErrors": 20.60644744314379,
    "org.enso.compiler.benchmarks.module.ManyLocalVarsBenchmark.longMethodWithLotOfLocalVars": 6.883044194710099,
    "org.enso.compiler.benchmarks.module.ManyNestedBlocksBenchmark.manyNestedBlocks": 11.322624678584326,
    "org.enso.compiler.benchmarks.module.ManySmallMethodsBenchmark.manySmallMethods": 42.9094946229499,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverComputingProxy": 0.12168288130810778,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverDelegatingProxy": 0.19456942565769847,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverVector": 0.08164240397032105,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverVectorBackedByComputingProxy": 0.12170241084901345,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverVectorBackedByDelegatingProxy": 0.19466675660584212,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchGenerateList": 3.7953991665123703,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchGenerateListAutoscoping": 23.992014951081647,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchGenerateListQualified": 3.7500346150642336,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchMapReverseList": 7.366082238952574,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchMapReverseListCurry": 7.335572513238776,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchReverseList": 5.8453338980169,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchReverseListMethods": 5.835919533996181,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumList": 4.260750751164509,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumListFallback": 4.543064842749602,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumListLeftFold": 3.7802026588231223,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumListMethods": 4.190840926630862,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOfromCall": 84.96602398202535,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOmethodCall": 85.06500904067796,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOmethodCallWithDefaultedArguments": 85.06773088813559,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOmethodCallWithNamedArguments": 84.97569368558611,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsPrimitives": 0.16541373156102007,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsStrings": 0.09518031521201603,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsTrees": 1.0261370038043685,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsWithConversion": 3.9513914082346844,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.caseBench3": 0.4514832111989027,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.caseBench6": 0.7232551239234533,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.ifBench3": 0.4547902590444681,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.ifBench6": 0.7173132356261722,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.ifBench6In": 2.059256743203918,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapAnyOverList": 67.20846415117069,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapConvOverList": 66.9404613207947,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapIntegerOverList": 68.39795618302155,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapMultiOverList": 62.632980515,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapOverLazyList": 85.03622319140321,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapOverList": 66.74154037597995,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapVConvertThatArgumentOfPlus": 71.76808793508839,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapVOverList": 68.02610227790954,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverComplexAndFloat5": 1.4221300881151564,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverComplexBaseBenchmark0": 0.27026498869613447,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverComplexFloatRecastedToFloat3": 1.6281756349594534,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverFloat2": 0.09772566254788298,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverFloatAndComplex6": 1.6526056812661216,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverFloatComplexRecastedToFloat4": 1.6569400354248482,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverInteger1": 0.08188815734972343,
    "org.enso.interpreter.bench.benchmarks.semantic.NamedDefaultedArgumentBenchmarks.benchSumTCOWithDefaultArgs": 84.90759205900869,
    "org.enso.interpreter.bench.benchmarks.semantic.NamedDefaultedArgumentBenchmarks.benchSumTCOWithNamedArgs": 85.03143002881356,
    "org.enso.interpreter.bench.benchmarks.semantic.NestedPatternCompilationBenchmarks.sumList": 0.09477192948784281,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchNestedThunkSum": 121.6240683060241,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchOversaturatedRecursiveCall": 84.95602118765133,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumRecursive": 0.0009991444416211318,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumStateTCO": 126.97995481772152,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumTCO": 84.96208569661017,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumTCOFoldLike": 85.11975798135593,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumTCOWithEval": 85.04013301694916,
    "org.enso.interpreter.bench.benchmarks.semantic.StringBenchmarks.lengthOfStrings": 0.002744333310815801,
    "org.enso.interpreter.bench.benchmarks.semantic.TypePatternBenchmarks.matchOverAny": 0.000599244885787911,
    "org.enso.interpreter.bench.benchmarks.semantic.TypePatternBenchmarks.matchOverDecimal": 0.0005947745025652156,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageAbstractList": 0.0763808692187321,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverArray": 0.00200636252766491,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverArrayProxy": 0.0022491471732737885,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverArrayProxyNew": 0.002250723639223081,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverPolyglotArray": 0.0015317118345087263,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverPolyglotVector": 0.0020140367281641916,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverSlice": 0.0014042432403514422,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverSliceWrapped10": 0.0069834743134474615,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverSliceWrapped100": 0.0069925149990055545,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverVector": 0.0020125236038065373,
    "org.enso.interpreter.bench.benchmarks.semantic.WarningBenchmarks.diffWarningRandomElementsVecSum": 0.32499488687647754,
    "org.enso.interpreter.bench.benchmarks.semantic.WarningBenchmarks.noWarningsVecSum": 0.008220309896184937,
    "org.enso.interpreter.bench.benchmarks.semantic.WarningBenchmarks.randomElementsVecSum": 0.034831287647392926,
    "org.enso.interpreter.bench.benchmarks.semantic.WarningBenchmarks.sameWarningVecSum": 1.8126670515716572
  }
}