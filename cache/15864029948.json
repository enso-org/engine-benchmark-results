{
  "bench_run": {
    "id": "15864029948",
    "html_url": "https://github.com/enso-org/enso/actions/runs/15864029948",
    "run_attempt": 1,
    "event": "schedule",
    "display_title": "Benchmark Engine",
    "head_commit": {
      "id": "bbe2b74a3f28fa80148b5a4442cd08fe1328f33e",
      "message": "Moving to a new masking approach (#13341)\n\n- Updated `LongArrayList` allowing for initial capacity and copying to an array.\n- Fix for Azure SAS token support.\n- Removes remaining methods from `Storage` (`slice`, `applyMask` and `applyFilter`).\n- Removes `newInstance` and `newUnderlyingArray` from `SpecialisedStorage` as only used by these.\n- Also removes `iteratorWithIndex` from base `ColumnStorage<?>` as unused. Specialised versions are still kept.\n- Remove use of concrete storage types and use interfaces instead.\n- Made the `Builder` interface return the builder allowing for a more fluid use.\n- Also adjusted `BuilderForType<T>` to use the typed argument more.\n- Moved `makeEmpty` into the `Builder` class as a static method producing a masked single value storage.\n- Removed `BoolBuilder.makeConstant`, use the `Builder` method instead.\n- Moved `DoubleStorageFacade` inside `NumericColumnAdapter` and privatised.\n- Added `StorageIterators.forEachOverBooleanStorage` as this was missing.\n- Created reusable implementations of `ColumnStorageIterators` for Boolean, Long and Double storages.\n- Removed unused `ComputedNullableLongStorage`.\n- Aligned `getData` methods on `DoubleStorage`, `LongStorage` and `BoolStorage` to `getArray`.\n- The new `IndexMapper` (similar to the old `OrderMask`) keeps a single mask layer.\n- Has implementations for a single value (Constant), single slice, array remapping **and reverse slice**.\n- Has caching on merge, so when creating layering, we flatten into a single `IndexMapper`.\n- Supports the same `NOT_FOUND_INDEX` that `OrderMask` had.\n- New `MaskOperation`:\n- Implements slicing and masking by creating a `MaskedStorage` with an `IndexMapper`.\n- `MaskedStorage` has a parent storage and index mapper.\n- Specialised versions cover the interfaces of `ColumnStorage`.\n- When masking a masked storage, the `IndexMappers are merged and a new single layer mask is created.\n- Changed `SliceRange` to be long-based and to have a static method to produce a `long[]` array.\n- `Column` now uses `ColumnStorage<T>` not `Storage<T>`.\n- `Column.applyFilter` removed - only used by `Table.filter` and replaced by `Column.mask`.\n- Remove `Column.applyMask`, `Table.applyMask` and `OrderMask`.\n- Moved `slice` and `mask` to use the `MaskOperation`.\n- Updated `Table.filter` to use the `MaskOperation`.\n- Altered `MultiValueKey` and `MultiValueIndex` to have long row indexes.\n- **Temporary work around so aggregators still get a `List<Integer>` will fix in next PR.**\n- Updated `JoinResult` to use `IndexMapper` instead of `OrderMask`.\n- Updated `CrossJoin` to have a progress handler.\n- Updated `SortJoin`, `CompoundHashJoin` and `SimpleHashJoin` to be long-indexed.\n- Updated `LookupJoin` to be long indexed.\n- Altered GroupingOrderingVisitor to be long-indexed based.\n- **Need to revisit in next PR and use builders and examine structure more.**\n- Added `Column.reverse` and `Table.reverse` using `IndexMapper.Reversed`.\n- Altered `OrderBuilder.buildMask` to take a single `OrderRule` instead of a `Vector`.\n- Amended to work with long row indexes.\n- Also returns a `long[]` and then lets you call `mask` on the column.\n- Amended `Fan_Out` to use mask approach.\n- Applies to the table to optimise building the new table.",
      "timestamp": "2025-06-25T00:00:06Z",
      "author": {
        "name": "James Dunkerley"
      }
    }
  },
  "label_score_dict": {
    "org.enso.compiler.benchmarks.exportimport.ExportImportResolutionBenchmark.importsAndExportsResolution": 2.103274687018056,
    "org.enso.compiler.benchmarks.exportimport.ExportImportResolutionBenchmark.importsResolution": 0.2252171430064487,
    "org.enso.compiler.benchmarks.inline.InlineCompilerBenchmark.longExpression": 67.49230043481877,
    "org.enso.compiler.benchmarks.inline.InlineCompilerErrorBenchmark.expressionWithErrors": 68.84060026497582,
    "org.enso.compiler.benchmarks.module.ImportStandardLibrariesBenchmark.importStandardLibraries": 70.34662061861027,
    "org.enso.compiler.benchmarks.module.ManyErrorsBenchmark.manyErrors": 22.00085290924452,
    "org.enso.compiler.benchmarks.module.ManyLocalVarsBenchmark.longMethodWithLotOfLocalVars": 6.64952400079159,
    "org.enso.compiler.benchmarks.module.ManyNestedBlocksBenchmark.manyNestedBlocks": 10.463353022319236,
    "org.enso.compiler.benchmarks.module.ManySmallMethodsBenchmark.manySmallMethods": 41.61773553112033,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverComputingProxy": 0.12166828859953571,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverDelegatingProxy": 0.1946505265715065,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverVector": 0.08204686915404533,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverVectorBackedByComputingProxy": 0.12156045142232388,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverVectorBackedByDelegatingProxy": 0.19473298538857928,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchGenerateList": 3.671473347154495,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchGenerateListAutoscoping": 22.32546793588629,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchGenerateListQualified": 3.6330041886198963,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchMapReverseList": 8.233827524578453,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchMapReverseListCurry": 6.505335858675011,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchReverseList": 5.887948918020838,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchReverseListMethods": 6.941656118745565,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumList": 3.7097187027910854,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumListFallback": 3.847188932678809,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumListLeftFold": 3.730795724064194,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumListMethods": 4.4812210336935525,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOfromCall": 85.11197866949153,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOmethodCall": 85.05144696440678,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOmethodCallWithDefaultedArguments": 85.10433601864406,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOmethodCallWithNamedArguments": 84.65372960713573,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsPrimitives": 0.14696814602635455,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsStrings": 0.07817659087526517,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsTrees": 1.0385696386311531,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsWithConversion": 3.7015409925299867,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.caseBench3": 1.2535151067174963,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.caseBench6": 0.6944314246598497,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.ifBench3": 1.7056711795909971,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.ifBench6": 0.6627583774660001,
    "org.enso.interpreter.bench.benchmarks.semantic.IfVsCaseBenchmarks.ifBench6In": 1.988939740431288,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapAnyOverList": 69.28877189797893,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapConvOverList": 66.8475314867248,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapIntegerOverList": 67.55480701372213,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapMultiOverList": 68.22429067891157,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapOverLazyList": 84.06629230457108,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapOverList": 66.30497377862723,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapVConvertThatArgumentOfPlus": 71.58839691602397,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapVOverList": 65.35937750820813,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverComplexAndFloat5": 1.4057714445393112,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverComplexBaseBenchmark0": 0.24775882861452328,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverComplexFloatRecastedToFloat3": 1.4453917988853147,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverFloat2": 0.09771712437940161,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverFloatAndComplex6": 1.4220638703757627,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverFloatComplexRecastedToFloat4": 1.5652387084214165,
    "org.enso.interpreter.bench.benchmarks.semantic.MultiValueBenchmarks.sumOverInteger1": 0.08220572398479604,
    "org.enso.interpreter.bench.benchmarks.semantic.NamedDefaultedArgumentBenchmarks.benchSumTCOWithDefaultArgs": 84.81679054718701,
    "org.enso.interpreter.bench.benchmarks.semantic.NamedDefaultedArgumentBenchmarks.benchSumTCOWithNamedArgs": 85.0787091559322,
    "org.enso.interpreter.bench.benchmarks.semantic.NestedPatternCompilationBenchmarks.sumList": 0.09448897787721064,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchNestedThunkSum": 121.65400760481927,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchOversaturatedRecursiveCall": 85.09039989491525,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumRecursive": 0.0009569256261619169,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumStateTCO": 126.15413662,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumTCO": 85.11896353898305,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumTCOFoldLike": 85.08175755254237,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumTCOWithEval": 85.06200892372881,
    "org.enso.interpreter.bench.benchmarks.semantic.StringBenchmarks.lengthOfStrings": 0.002749987218986735,
    "org.enso.interpreter.bench.benchmarks.semantic.TypePatternBenchmarks.matchOverAny": 0.0005956038038921702,
    "org.enso.interpreter.bench.benchmarks.semantic.TypePatternBenchmarks.matchOverDecimal": 0.0005843124078737447,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageAbstractList": 0.07947632692498359,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverArray": 0.002011458165888232,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverArrayProxy": 0.002253796250868012,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverArrayProxyNew": 0.0022383861522756745,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverPolyglotArray": 0.001525499911048745,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverPolyglotVector": 0.002011728524926467,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverSlice": 0.0013984721248884715,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverSliceWrapped10": 0.006921384906983007,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverSliceWrapped100": 0.006884319789028979,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverVector": 0.002011477006847577,
    "org.enso.interpreter.bench.benchmarks.semantic.WarningBenchmarks.diffWarningRandomElementsVecSum": 0.3188560044732471,
    "org.enso.interpreter.bench.benchmarks.semantic.WarningBenchmarks.noWarningsVecSum": 0.008247556795377543,
    "org.enso.interpreter.bench.benchmarks.semantic.WarningBenchmarks.randomElementsVecSum": 0.03515989713085709,
    "org.enso.interpreter.bench.benchmarks.semantic.WarningBenchmarks.sameWarningVecSum": 2.038563056627188
  }
}