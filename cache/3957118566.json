{
  "bench_run": {
    "id": "3957118566",
    "html_url": "https://github.com/enso-org/enso/actions/runs/3957118566",
    "run_attempt": 1,
    "event": "push",
    "display_title": "All Enso objects are hasheable (#3878)",
    "head_commit": {
      "id": "fcc2163ae3f98f540aacd0a38ab5e6df0d2fc6ce",
      "message": "All Enso objects are hasheable (#3878)\n\n* Hash codes prototype\r\n\r\n* Remove Any.hash_code\r\n\r\n* Improve caching of hashcode in atoms\r\n\r\n* [WIP] Add Hash_Map type\r\n\r\n* Implement Any.hash_code builtin for primitives and vectors\r\n\r\n* Add some values to ValuesGenerator\r\n\r\n* Fix example docs on Time_Zone.new\r\n\r\n* [WIP] QuickFix for HashCodeTest before PR #3956 is merged\r\n\r\n* Fix hash code contract in HashCodeTest\r\n\r\n* Add times and dates values to HashCodeTest\r\n\r\n* Fix docs\r\n\r\n* Remove hashCodeForMetaInterop specialization\r\n\r\n* Introduce snapshoting of HashMapBuilder\r\n\r\n* Add unit tests for EnsoHashMap\r\n\r\n* Remove duplicate test in Map_Spec.enso\r\n\r\n* Hash_Map.to_vector caches result\r\n\r\n* Hash_Map_Spec is a copy of Map_Spec\r\n\r\n* Implement some methods in Hash_Map\r\n\r\n* Add equalsHashMaps specialization to EqualsAnyNode\r\n\r\n* get and insert operations are able to work with polyglot values\r\n\r\n* Implement rest of Hash_Map API\r\n\r\n* Add test that inserts elements with keys with same hash code\r\n\r\n* EnsoHashMap.toDisplayString use builder storage directly\r\n\r\n* Add separate specialization for host objects in EqualsAnyNode\r\n\r\n* Fix specialization for host objects in EqualsAnyNode\r\n\r\n* Add polyglot hash map tests\r\n\r\n* EconomicMap keeps reference to EqualsNode and HashCodeNode.\r\n\r\nRather than passing these nodes to `get` and `insert` methods.\r\n\r\n* HashMapTest run in polyglot context\r\n\r\n* Fix containsKey index handling in snapshots\r\n\r\n* Remove snapshots field from EnsoHashMapBuilder\r\n\r\n* Prepare polyglot hash map handling.\r\n\r\n- Hash_Map builtin methods are separate nodes\r\n\r\n* Some bug fixes\r\n\r\n* Remove ForeignMapWrapper.\r\n\r\nWe would have to wrap foreign maps in assignments for this to be efficient.\r\n\r\n* Improve performance of Hash_Map.get_builtin\r\n\r\nAlso, if_nothing parameter is suspended\r\n\r\n* Remove to_flat_vector.\r\n\r\nInterop API requires nested vector (our previous to_vector implementation). Seems that I have misunderstood the docs  the first time I read it.\r\n\r\n- to_vector does not sort the vector by keys by default\r\n\r\n* Fix polyglot hash maps method dispatch\r\n\r\n* Add tests that effectively test hash code implementation.\r\n\r\nVia hash map that behaves like a hash set.\r\n\r\n* Remove Hashcode_Spec\r\n\r\n* Add some polyglot tests\r\n\r\n* Add Text.== tests for NFD normalization\r\n\r\n* Fix NFD normalization bug in Text.java\r\n\r\n* Improve performance of EqualsAnyNode.equalsTexts specialization\r\n\r\n* Properly compute hash code for Atom and cache it\r\n\r\n* Fix Text specialization in HashCodeAnyNode\r\n\r\n* Add Hash_Map_Spec as part of all tests\r\n\r\n* Remove HashMapTest.java\r\n\r\nProviding all the infrastructure for all the needed Truffle nodes is no longer manageable.\r\n\r\n* Remove rest of identityHashCode message implementations\r\n\r\n* Replace old Map with Hash_Map\r\n\r\n* Add some docs\r\n\r\n* Add TruffleBoundaries\r\n\r\n* Formatting\r\n\r\n* Fix some tests to accept unsorted vector from Map.to_vector\r\n\r\n* Delete Map.first and Map.last methods\r\n\r\n* Add specialization for big integer hash\r\n\r\n* Introduce proper HashCodeTest and EqualsTest.\r\n\r\n- Use jUnit theories.\r\n- Call nodes directly\r\n\r\n* Fix some specializations for primitives in HashCodeAnyNode\r\n\r\n* Fix host object specialization\r\n\r\n* Remove Any.hash_code\r\n\r\n* Fix import in Map.enso\r\n\r\n* Update changelog\r\n\r\n* Reformat\r\n\r\n* Add truffle boundary to BigInteger.hashCode\r\n\r\n* Fix performance of HashCodeTest - initialize DataPoints just once\r\n\r\n* Fix MetaIsATest\r\n\r\n* Fix ValuesGenerator.textual - Java's char is not Text\r\n\r\n* Fix indent in Map_Spec.enso\r\n\r\n* Add maps to datapoints in HashCodeTest\r\n\r\n* Add specialization for maps in HashCodeAnyNode\r\n\r\n* Add multiLevelAtoms to ValuesGenerator\r\n\r\n* Provide a workaround for non-linear key inserts\r\n\r\n* Fix specializations for double and BigInteger\r\n\r\n* Cosmetics\r\n\r\n* Add truffle boundaries\r\n\r\n* Add allowInlining=true to some truffle boundaries.\r\n\r\nIncreases performance a lot.\r\n\r\n* Increase the size of vectors, and warmup time for Vector.Distinct benchmark\r\n\r\n* Various small performance fixes.\r\n\r\n* Fix Geo_Spec tests to accept unsorted Map.to_vector\r\n\r\n* Implement Map.remove\r\n\r\n* FIx Visualization tests to accept unsorted Map.to_vector\r\n\r\n* Treat java.util.Properties as Map\r\n\r\n* Add truffle boundaries\r\n\r\n* Invoke polyglot methods on java.util.Properties\r\n\r\n* Ignore python tests if python lang is missing",
      "timestamp": "2023-01-19T09:33:25Z",
      "author": {
        "name": "Pavel Marek"
      },
      "url": "https://github.com/enso-org/enso/commit/fcc2163ae3f98f540aacd0a38ab5e6df0d2fc6ce"
    }
  },
  "label_score_dict": {
    "org.enso.interpreter.bench.benchmarks.RuntimeCacheBenchmarks.benchCacheGet": 0.00661928559073723,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverComputingProxy": 0.18030253203390342,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverDelegatingProxy": 5.453069486178649,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverVector": 1.8004496436422113,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverVectorBackedByComputingProxy": 0.1440765167676261,
    "org.enso.interpreter.bench.benchmarks.semantic.ArrayProxyBenchmarks.sumOverVectorBackedByDelegatingProxy": 4.349555946555235,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchGenerateList": 8.263655890206365,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchGenerateListQualified": 8.097556093224505,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchMapReverseCurryList": 2.920023828534864e-05,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchMapReverseList": 2.920129964939984e-05,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchReverseList": 2.9201383532637917e-05,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchReverseListMethods": 2.921568657805926e-05,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumList": 2.9260197726295607e-05,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumListFallback": 2.919115203177039e-05,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.benchSumListMethods": 2.9259508225297572e-05,
    "org.enso.interpreter.bench.benchmarks.semantic.AtomBenchmarks.sumListLeftFold": 2.9263435706499753e-05,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOfromCall": 96.31828966659269,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOmethodCall": 96.25216119136385,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOmethodCallWithDefaultedArguments": 96.26362054049005,
    "org.enso.interpreter.bench.benchmarks.semantic.CallableBenchmarks.benchSumTCOmethodCallWithNamedArguments": 96.23403742921867,
    "org.enso.interpreter.bench.benchmarks.semantic.CurriedFunctionBenchmarks.averageCurried": 0.1317245283544848,
    "org.enso.interpreter.bench.benchmarks.semantic.CurriedFunctionBenchmarks.averageLambda": 0.14918352244411615,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsPrimitives": 0.1662252569491689,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsStrings": 0.08811053243497316,
    "org.enso.interpreter.bench.benchmarks.semantic.EqualsBenchmarks.equalsTrees": 1.3761256317162422,
    "org.enso.interpreter.bench.benchmarks.semantic.ListBenchmarks.mapOverList": 45.56396494435997,
    "org.enso.interpreter.bench.benchmarks.semantic.NamedDefaultedArgumentBenchmarks.benchSumTCOWithDefaultArgs": 96.22079429368469,
    "org.enso.interpreter.bench.benchmarks.semantic.NamedDefaultedArgumentBenchmarks.benchSumTCOWithNamedArgs": 96.28172642962551,
    "org.enso.interpreter.bench.benchmarks.semantic.NestedPatternCompilationBenchmarks.sumList": 0.19701684941360728,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchNestedThunkSum": 89.45656278430124,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchOversaturatedRecursiveCall": 96.37447766593837,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumRecursive": 0.001036628955284253,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumStateTCO": 89.69111345220524,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumTCO": 96.33755054095238,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumTCOFoldLike": 96.3284049127878,
    "org.enso.interpreter.bench.benchmarks.semantic.RecursionBenchmarks.benchSumTCOWithEval": 96.32821752356911,
    "org.enso.interpreter.bench.benchmarks.semantic.StringBenchmarks.lengthOfStrings": 0.040500540192779766,
    "org.enso.interpreter.bench.benchmarks.semantic.TypePatternBenchmarks.matchOverAny": 0.004225824118073055,
    "org.enso.interpreter.bench.benchmarks.semantic.TypePatternBenchmarks.matchOverDecimal": 0.004755655884748138,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageAbstractList": 0.09348273459926457,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverArray": 0.0012776399310174187,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverArrayProxy": 0.0013989206869868295,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverArrayProxyNew": 0.00140077577965558,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverPolyglotArray": 0.0012748861666253676,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverPolyglotVector": 0.001270917099337562,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverSlice": 0.001636819804967262,
    "org.enso.interpreter.bench.benchmarks.semantic.VectorBenchmarks.averageOverVector": 0.001274338983925147
  }
}